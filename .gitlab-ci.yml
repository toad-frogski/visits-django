stages:
  - build image
  - test
  - build
  - deploy

#
#  STAGE: BUILD IMAGE
#

build_backend_dev:
  stage: build image
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/backend:dev backend -f backend/Dockerfile.dev
    - docker push $CI_REGISTRY_IMAGE/backend:dev
  rules:
    - if: $CI_COMMIT_BRANCH == "development"
      when: on_success
  tags:
    - builder

build_backend:
  stage: build image
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/backend:latest backend
    - docker push $CI_REGISTRY_IMAGE/backend:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: on_success
      changes:
        - backend/{,**/}*
        - .gitlab-ci.yml
  tags:
    - builder

build_mqtt_subscriber:
  stage: build image
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/mqtt_subscriber:latest mqtt_subscriber
    - docker push $CI_REGISTRY_IMAGE/mqtt_subscriber:latest

#
#  STAGE: BUILD
#

generate_schema:
  stage: build
  image: $CI_REGISTRY_IMAGE/backend:latest
  script:
    - python manage.py spectacular --file schema.yml
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: on_success
  artifacts:
    paths:
      - schema.yml
    expire_in: 1 day
  tags:
    - docker-builder

build_frontend:
  stage: build
  image: node:20
  needs:
    - job: generate_schema
      artifacts: true
  script:
    - test -z "$FRONTEND_ENV_FILE" && exit 1
    - echo "$MQTT_ENV_FILE" > frontend/.env
    - cd frontend
    - yarn install
    - SCHEMA_URL=$API_SCHEMA_URL yarn api:api:generate
    - yarn build
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: on_success
  artifacts:
    paths:
      - frontend/dist
  tags:
    - docker-builder


#
#  STAGE: DEPLOY
#

deploy_frontend:
  stage: deploy
  script:
    - test -z "$PROJECT_ROOT" && exit 1
    - cd $PROJECT_ROOT
    - rsync $CI_PROJECT_ROOT/frontend/dist/ $PROJECT_ROOT/frontend/dist/
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: on_success
      changes:
        - frontend/{,**/}*
        - .gitlab-ci.yml
  tags:
    - ssh-deploy

deploy_app:
  stage: deploy
  needs:
    - job: deploy_frontend
  script:
    - echo "Deploying app..."
    - test -z "$PROJECT_ROOT" && exit 1
    - test -z "$BACKEND_ENV_FILE" && exit 1
    - test -z "$MQTT_ENV_FILE" && exit 1
    - cd $PROJECT_ROOT
    - echo "$BACKEND_ENV_FILE" > backend/.env
    - echo "$MQTT_ENV_FILE" > mqtt_subscriber/.env
    - docker compose pull
    - docker compose up -d
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: on_success
      changes:
        - backend/{,**/}*
        - .gitlab-ci.yml
  tags:
    - ssh-deploy

apply_migrations:
  stage: deploy
  needs:
    - job: deploy_app
  script:
    - test -z "$PROJECT_ROOT" && exit 1
    - cd $PROJECT_ROOT
    - docker compose run --rm --no-deps backend python manage.py migrate
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: on_success
      changes:
        - backend/*/migrations/
        - backend/*/migrations/*.py
        - .gitlab-ci.yml
